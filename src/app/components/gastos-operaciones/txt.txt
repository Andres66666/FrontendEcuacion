import { AfterViewInit, Component, HostListener, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { Router } from '@angular/router';
import { ServiciosService } from '../../services/servicios.service';
import { ExportService } from '../../services/export.service';
import {
  Proyecto,
  GastoOperacion,
  Modulo,
  GastosGenerales,
} from '../../models/models';
import { ConfirmacionComponent } from '../mensajes/confirmacion/confirmacion/confirmacion.component';
import { OkComponent } from '../mensajes/ok/ok.component';
import { ErrorComponent } from '../mensajes/error/error.component';
import { NumeroALetras } from '../../utils/numeroALetras';
import { DragDropModule } from '@angular/cdk/drag-drop';
import { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';
import { map } from 'rxjs/operators';
import { ViewChild, ElementRef } from '@angular/core';
import { forkJoin } from 'rxjs';
import { ChangeDetectorRef } from '@angular/core'; // Agrega si no está

declare var bootstrap: any;
interface GastoOperacionExtendido extends Partial<GastoOperacion> {
  esNuevo?: boolean;
  editarUnidad?: boolean;
  tipo?: 'modulo' | 'modulo_registrado' | 'gasto'; // Nuevo: distingue tipos
  codigo?: string;
  nombre?: string;
  editarModulo?: boolean;
  moduloId?: number | null;
  editar?: boolean; // Al final de la interfaz
}

@Component({
  selector: 'app-gastos-operaciones',
  standalone: true,
  imports: [
    CommonModule,
    FormsModule,
    ConfirmacionComponent,
    OkComponent,
    ErrorComponent,
    DragDropModule,
  ],
  templateUrl: './gastos-operaciones.component.html',
  styleUrls: ['./gastos-operaciones.component.css'],
})
export class GastosOperacionesComponent implements OnInit, AfterViewInit {
  // 1. PROPIEDADES DE CONFIGURACIÓN DEL PROYECTO
  carga_social: number = 0;
  iva_efectiva: number = 0;
  herramientas: number = 0;
  gastos_generales: number = 0;
  iva_tasa_nominal: number = 0;
  it: number = 0;
  iue: number = 0;
  ganancia: number = 0;
  a_costo_venta: number = 0;
  b_margen_utilidad: number = 0;
  porcentaje_global_100: number = 100;
  nombreProyecto: string = '';
  // 2. PROPIEDADES DE ESTADO DE UI Y MENSAJES
  formatoInvalido = false;
  mostrarConfirmacion = false;
  tipoConfirmacion: 'proyecto' | 'item' | null = null;
  itemIndexAEliminar: number | null = null;
  mensajeConfirmacion = '';
  mensajeExito = '';
  mensajeError = '';
  proyectosFiltrados: Proyecto[] = [];
  mostrarDropdownProyectos: boolean = false;
  seleccionando: boolean = false;
  // 3. PROPIEDADES DE USUARIO LOGUEADO
  usuario_id = 0;
  nombre_usuario = '';
  apellido = '';
  roles: string[] = [];
  permisos: string[] = [];
  // 4. PROPIEDADES DE DATOS PRINCIPALES
  listaProyectos: Proyecto[] = [];
  proyectoSeleccionado: Proyecto | null = null;
  proyectoData: Partial<Proyecto> = {};
  items: GastoOperacionExtendido[] = [];
  totalOperacionPorGasto: { [id: number]: number } = {};
  identificadorGeneral = 0;
  modulos: Modulo[] = [];
  moduloSeleccionado: number | null = null;
  modulosEnItems: GastoOperacionExtendido[] = [];
  // 5. PROPIEDADES AUXILIARES Y DE MODALES
  @ViewChild('modalMover') modalMoverRef!: ElementRef;
  modalMover: any;
  itemIndexAMover: number | null = null;
  nuevaPosicion: number = 1;
  unidadesUsadas: string[] = [];
  unidadesFiltradas: string[][] = [];
  mostrarLista: boolean[] = [];
  descripcionesUsadas: string[] = [];
  descripcionesFiltradas: string[][] = [];
  mostrarListaDescripcion: boolean[] = [];
  catalogoGastos: { descripcion: string; ultimo_precio?: number }[] = [];
  modalNuevoProyecto: any;
  modalParametros: any;

  constructor(
    private router: Router,
    private servicios: ServiciosService,
    private exportService: ExportService,
    private cdr: ChangeDetectorRef
  ) {}
  // Métodos de ciclo de vida
  ngOnInit(): void {
    this.recuperarUsuarioLocalStorage();
    this.cargarProyectos();
    const ultimoProyectoStr = localStorage.getItem(
      'ultimoProyectoSeleccionado'
    );
    if (ultimoProyectoStr) {
      try {
        const proyectoGuardado: Proyecto = JSON.parse(ultimoProyectoStr);
        this.asignarProyecto(proyectoGuardado);
      } catch (error) {
        console.error('Error al cargar último proyecto', error);
      }
    }
    this.modalNuevoProyecto = new bootstrap.Modal(
      document.getElementById('modalNuevoProyecto')
    );
    this.modalParametros = new bootstrap.Modal(
      document.getElementById('modalParametros')
    );
    this.modalMover = new bootstrap.Modal(
      document.getElementById('modalMover')
    );
    this.cargarUnidadesGasto();
    this.cargarCatalogoGastos();
  }

  ngAfterViewInit() {
    this.modalMover = new bootstrap.Modal(
      document.getElementById('modalMover')!
    );
    setTimeout(() => {
      this.inicializarSubDropdownFinanciero();
      this.inicializarSubDropdownTipo();
      this.inicializarDropdowns();
    }, 150);
  }
  // Métodos de inicialización y carga de datos
  private recuperarUsuarioLocalStorage() {
    const usuarioStr = localStorage.getItem('usuarioLogueado');
    if (!usuarioStr) return;
    try {
      const datosUsuario = JSON.parse(usuarioStr);
      this.usuario_id = datosUsuario.id ?? 0;
      this.nombre_usuario = datosUsuario.nombre ?? '';
      this.apellido = datosUsuario.apellido ?? '';
      this.roles = datosUsuario.rol ?? [];
      this.permisos = datosUsuario.permiso ?? [];
    } catch (error) {
      console.error('Error al parsear usuario desde localStorage', error);
    }
  }

  cargarProyectos(): void {
    this.servicios.getIdentificadorGeneral().subscribe({
      next: (res) => (this.listaProyectos = res),
      error: (err) =>
        this.mostrarMensaje(
          'error',
          'No se pudieron cargar los proyectos existentes.'
        ),
    });
  }
  cargarGastos(idGeneral: number): void {
    if (!idGeneral) {
      this.items = [];
      this.modulosEnItems = [];
      this.unidadesFiltradas = [];
      this.mostrarLista = [];
      this.descripcionesFiltradas = [];
      this.mostrarListaDescripcion = [];
      return;
    }
    this.cargarModulos(idGeneral);
    this.servicios.getGastoOperacionID(idGeneral).subscribe({
      next: (res) => {
        const gastos: GastoOperacionExtendido[] = res.map((item) => ({
          ...item,
          tipo: 'gasto' as const,
          esNuevo: false,
          editarModulo: false,
          editar: false,
          moduloId: item.modulo?.id ?? null,
        }));
        this.items = [...this.modulosEnItems, ...gastos];
        this.items.forEach((item) => {
          if (!item.id) return;
          this.servicios
            .getGastosGenerales(item.id)
            .pipe(map((gastos) => (gastos.length > 0 ? gastos[0].total : 0)))
            .subscribe((total) => {
              this.totalOperacionPorGasto[item.id!] = total;
              item.precio_unitario = total;
              item.precio_literal = NumeroALetras.convertirConDecimal(
                this.SumaPrecioUnitarioActividad(item)
              );
              this.cdr.detectChanges();
            });
        });
        this.ordenarItemsPorModulos();
        this.unidadesFiltradas = this.items.map(() => [...this.unidadesUsadas]);
        this.mostrarLista = this.items.map(() => false);
        this.descripcionesFiltradas = this.items.map(() => [
          ...this.descripcionesUsadas,
        ]);
        this.mostrarListaDescripcion = this.items.map(() => false);
        this.items.forEach((item) => {
          if (item.unidad) this.agregarUnidadSiNoExiste(item.unidad);
          if (item.descripcion)
            this.agregarDescripcionSiNoExiste(item.descripcion);
        });
      },
      error: (err) => {
        this.mostrarMensaje('error', 'Error al cargar gastos.');
        this.items = [];
        this.unidadesFiltradas = [];
        this.mostrarLista = [];
        this.descripcionesFiltradas = [];
        this.mostrarListaDescripcion = [];
      },
    });
  }
  // REFACTORIZACIÓN: Unificado para manejar creación y actualización en un solo método - guardarProyecto
  cargarModulos(idGeneral: number): void {
    if (!idGeneral) {
      this.modulos = [];
      this.modulosEnItems = [];
      return;
    }
    this.servicios.getModulosPorProyecto(idGeneral).subscribe({
      next: (modulos) => {
        this.modulos = modulos;
        this.modulosEnItems = modulos.map((mod) => ({
          id: mod.id,
          tipo: 'modulo_registrado' as const,
          codigo: mod.codigo,
          nombre: mod.nombre,
          esNuevo: false,
          editar: false,
          editarModulo: false,
          moduloId: mod.id,
        }));
      },
      error: (err) => {
        console.error('Error al cargar módulos:', err);
        this.mostrarMensaje('error', 'Error al cargar módulos del proyecto.');
        this.modulos = [];
        this.modulosEnItems = [];
      },
    });
  }
  private asignarProyecto(proyecto: Proyecto | null) {
    if (!proyecto) {
      this.modulos = [];
      this.modulosEnItems = [];
      this.proyectoSeleccionado = null;
      this.proyectoData = {};
      this.items = [];
      this.identificadorGeneral = 0;
      this.nombreProyecto = '';
      this.carga_social = 0;
      this.iva_efectiva = 0;
      this.herramientas = 0;
      this.gastos_generales = 0;
      this.iva_tasa_nominal = 0;
      this.it = 0;
      this.iue = 0;
      this.ganancia = 0;
      this.a_costo_venta = 0;
      this.b_margen_utilidad = 0;
      this.porcentaje_global_100 = 0;
      localStorage.removeItem('ultimoProyectoSeleccionado');
      this.cdr.detectChanges();
      return;
    }
    this.proyectoSeleccionado = proyecto;
    this.proyectoData = { ...proyecto };
    this.identificadorGeneral = proyecto.id_general;
    this.nombreProyecto = proyecto.NombreProyecto;
    this.carga_social = proyecto.carga_social ?? 0;
    this.iva_efectiva = proyecto.iva_efectiva ?? 0;
    this.herramientas = proyecto.herramientas ?? 0;
    this.gastos_generales = proyecto.gastos_generales ?? 0;
    this.iva_tasa_nominal = proyecto.iva_tasa_nominal ?? 0;
    this.it = proyecto.it ?? 0;
    this.iue = proyecto.iue ?? 0;
    this.ganancia = proyecto.ganancia ?? 0;
    this.a_costo_venta = proyecto.a_costo_venta ?? 0;
    this.b_margen_utilidad = proyecto.b_margen_utilidad ?? 0;
    this.porcentaje_global_100 = proyecto.porcentaje_global_100 ?? 0;
    this.cargarGastos(this.identificadorGeneral);
    this.cargarModulos(this.identificadorGeneral);
    localStorage.setItem(
      'ultimoProyectoSeleccionado',
      JSON.stringify(proyecto)
    );
    setTimeout(() => this.cdr.detectChanges(), 100);
  }
  // Métodos de Proyectos (CRUD y Gestión)
  onProyectoSeleccionado(): void {
    const proyecto = this.listaProyectos.find(
      (p) =>
        p.NombreProyecto.toLowerCase() ===
        this.proyectoData.NombreProyecto?.toLowerCase()
    );
    this.asignarProyecto(proyecto || null);
  }
  // REFACTORIZACIÓN: Unificado para manejar creación, actualización y parámetros - guardarProyecto
  guardarProyecto() {
    if (!this.nombreProyecto.trim()) {
      this.mostrarModalError('Ingrese un nombre válido para el proyecto');
      return;
    }
    const proyectoPayload: Partial<Proyecto> = {
      NombreProyecto: this.nombreProyecto.trim(),
      carga_social: this.toNum(this.carga_social),
      iva_efectiva: this.toNum(this.iva_efectiva),
      herramientas: this.toNum(this.herramientas),
      gastos_generales: this.toNum(this.gastos_generales),
      iva_tasa_nominal: this.toNum(this.iva_tasa_nominal),
      it: this.toNum(this.it),
      iue: this.toNum(this.iue),
      ganancia: this.toNum(this.ganancia),
      a_costo_venta: this.toNum(this.a_costo_venta),
      b_margen_utilidad: this.toNum(this.b_margen_utilidad),
      porcentaje_global_100: this.toNum(this.porcentaje_global_100),
      creado_por: this.usuario_id,
      modificado_por: this.usuario_id,
    };
    const observable = this.proyectoSeleccionado?.id_general
      ? this.servicios.updateIdentificadorGeneral({
          ...proyectoPayload,
          id_general: this.proyectoSeleccionado.id_general,
        } as Proyecto)
      : this.servicios.createIdentificadorGeneral(proyectoPayload);
    observable.subscribe({
      next: (resp) => {
        this.asignarProyecto(resp);
        this.servicios.getIdentificadorGeneral().subscribe((proyectos) => {
          this.listaProyectos = proyectos;
          this.filtrarProyectos();
        });
        this.mostrarModalExito(
          this.proyectoSeleccionado?.id_general
            ? 'Proyecto actualizado'
            : 'Proyecto creado'
        );
      },
      error: (err) =>
        this.mostrarModalError(
          'Error al guardar proyecto: ' +
            (err.error?.error || 'Intente de nuevo')
        ),
    });
  }
  registrarProyecto(): void {
    this.guardarProyecto();
  }
  registrarNuevoProyecto(): void {
    this.guardarProyecto();
  }
  guardarParametros(): void {
    this.guardarProyecto();
  }
  actualizarProyecto(): void {
    this.guardarProyecto();
  }
  duplicarProyecto(proyecto: Proyecto, event: Event): void {
    event.stopPropagation();
    const proyectoDuplicado: Partial<Proyecto> = {
      ...proyecto,
      id_general: 0,
      NombreProyecto: proyecto.NombreProyecto + ' (Copia)',
      creado_por: this.usuario_id,
      modificado_por: this.usuario_id,
    };
    this.servicios.createIdentificadorGeneral(proyectoDuplicado).subscribe({
      next: (nuevoProyecto) => {
        this.servicios
          .getModulosPorProyecto(proyecto.id_general)
          .subscribe((modulosOriginales) => {
            const observables = modulosOriginales.map((mod) =>
              this.servicios.createModulo({
                ...mod,
                id: 0,
                proyecto: nuevoProyecto.id_general,
                creado_por: this.usuario_id,
                modificado_por: this.usuario_id,
              })
            );
            forkJoin(observables).subscribe((modulosGuardados) => {
              const mapaModulos = new Map<number, number>();
              modulosOriginales.forEach((modOriginal, idx) =>
                mapaModulos.set(modOriginal.id!, modulosGuardados[idx].id!)
              );
              this.servicios
                .getGastoOperacionID(proyecto.id_general)
                .subscribe((gastosOriginales) => {
                  const gastosDuplicados = gastosOriginales.map((g) => ({
                    ...g,
                    id: 0,
                    identificador: nuevoProyecto,
                    modulo_id: g.modulo
                      ? mapaModulos.get(g.modulo.id!) ?? null
                      : null,
                    creado_por: this.usuario_id,
                    modificado_por: this.usuario_id,
                  }));
                  this.servicios
                    .createGastoOperacion(gastosDuplicados)
                    .subscribe((gastosGuardados) => {
                      gastosGuardados.gastos.forEach((gastoDuplicado, index) =>
                        this.duplicarSubItems(
                          gastosOriginales[index].id,
                          gastoDuplicado.id
                        )
                      );
                      this.mostrarModalExito(
                        'Proyecto duplicado correctamente con módulos y gastos.'
                      );
                      this.filtrarProyectos();
                    });
                });
            });
          });
      },
      error: (err) =>
        this.mostrarModalError(
          'Error al duplicar proyecto: ' +
            (err.error?.error || 'Intente de nuevo')
        ),
    });
  }
  duplicarSubItems(idGastoOriginal: number, idGastoDuplicado: number) {
    this.servicios
      .getMaterialesIDGasto(idGastoOriginal)
      .subscribe((materiales) => {
        const nuevos = materiales.map((m) => ({
          ...m,
          id: 0,
          id_gasto_operacion: idGastoDuplicado,
          creado_por: this.usuario_id,
        }));
        this.servicios.createMateriales(nuevos).subscribe();
      });
    this.servicios.getManoDeObraIDGasto(idGastoOriginal).subscribe((manos) => {
      const nuevas = manos.map((m) => ({
        ...m,
        id: 0,
        id_gasto_operacion: idGastoDuplicado,
        creado_por: this.usuario_id,
      }));
      this.servicios.createManoDeObraLista(nuevas).subscribe();
    });
    this.servicios
      .getEquipoHerramientas(idGastoOriginal)
      .subscribe((equipos) => {
        const nuevos = equipos.map((e) => ({
          ...e,
          id: 0,
          id_gasto_operacion: idGastoDuplicado,
          creado_por: this.usuario_id,
        }));
        this.servicios.createEquipoHerramientaLista(nuevos).subscribe();
      });
    this.servicios
      .getGastosGenerales(idGastoOriginal)
      .subscribe((gastosGen) => {
        const nuevos = gastosGen.map((g) => ({
          ...g,
          id: 0,
          id_gasto_operacion: idGastoDuplicado,
          creado_por: this.usuario_id,
        }));
        this.servicios.createGastosGeneralesLista(nuevos).subscribe();
      });
  }
  abrirModalParametros(verProyectoExistente: boolean) {
    if (verProyectoExistente && this.proyectoSeleccionado) {
      this.nombreProyecto = this.proyectoSeleccionado.NombreProyecto;
      this.carga_social = this.proyectoSeleccionado.carga_social ?? 0;
      this.iva_efectiva = this.proyectoSeleccionado.iva_efectiva ?? 0;
      this.herramientas = this.proyectoSeleccionado.herramientas ?? 0;
      this.gastos_generales = this.proyectoSeleccionado.gastos_generales ?? 0;
      this.iva_tasa_nominal = this.proyectoSeleccionado.iva_tasa_nominal ?? 0;
      this.it = this.proyectoSeleccionado.it ?? 0;
      this.iue = this.proyectoSeleccionado.iue ?? 0;
      this.ganancia = this.proyectoSeleccionado.ganancia ?? 0;
      this.a_costo_venta = this.proyectoSeleccionado.a_costo_venta ?? 0;
      this.b_margen_utilidad = this.proyectoSeleccionado.b_margen_utilidad ?? 0;
      this.porcentaje_global_100 =
        this.proyectoSeleccionado.porcentaje_global_100 ?? 100;
    } else {
      this.proyectoSeleccionado = null;
      this.nombreProyecto = '';
      this.carga_social = 0;
      this.iva_efectiva = 0;
      this.herramientas = 0;
      this.gastos_generales = 0;
      this.iva_tasa_nominal = 0;
      this.it = 0;
      this.iue = 0;
      this.ganancia = 0;
      this.a_costo_venta = 0;
      this.b_margen_utilidad = 0;
      this.porcentaje_global_100 = 100;
    }
    const modalEl = document.getElementById('modalProyectoParametros');
    const modal = new bootstrap.Modal(modalEl);
    modal.show();
  }
  actualizarParametrosEnTiempoReal(): void {
    if (!this.proyectoSeleccionado) return;
    const proyectoPayload: Partial<Proyecto> = {
      id_general: this.proyectoSeleccionado.id_general,
      NombreProyecto: this.nombreProyecto.trim(),
      carga_social: this.toNum(this.carga_social),
      iva_efectiva: this.toNum(this.iva_efectiva),
      herramientas: this.toNum(this.herramientas),
      gastos_generales: this.toNum(this.gastos_generales),
      iva_tasa_nominal: this.toNum(this.iva_tasa_nominal),
      it: this.toNum(this.it),
      iue: this.toNum(this.iue),
      ganancia: this.toNum(this.ganancia),
      a_costo_venta: this.toNum(this.a_costo_venta),
      b_margen_utilidad: this.toNum(this.b_margen_utilidad),
      porcentaje_global_100: this.toNum(this.porcentaje_global_100),
      modificado_por: this.usuario_id,
    };
    this.servicios
      .updateIdentificadorGeneral(proyectoPayload as Proyecto)
      .subscribe({
        next: (resp) => {
          this.asignarProyecto({
            ...this.proyectoSeleccionado,
            ...proyectoPayload,
          } as Proyecto);
          this.listaProyectos = this.listaProyectos.map((p) =>
            p.id_general === resp.id_general ? resp : p
          );
        },
        error: (err) =>
          this.mostrarModalError(
            'Error al actualizar parámetros: ' +
              (err.error?.error || 'Intente de nuevo')
          ),
      });
  }
  filtrarProyectos(): void {
    const termino = this.nombreProyecto.toLowerCase().trim();
    this.proyectosFiltrados = termino
      ? this.listaProyectos.filter((p) =>
          p.NombreProyecto.toLowerCase().includes(termino)
        )
      : [...this.listaProyectos];
  }
  seleccionarProyecto(proyecto: Proyecto): void {
    this.nombreProyecto = proyecto.NombreProyecto;
    this.asignarProyecto(proyecto);
    this.mostrarDropdownProyectos = false;
  }
  focusInput() {
    this.proyectosFiltrados = [...this.listaProyectos];
    this.mostrarDropdownProyectos = true;
  }
  // Métodos de Módulos (CRUD y Gestión)
  agregarModulo(): void {
    if (!this.identificadorGeneral) {
      this.mostrarMensaje(
        'error',
        'Selecciona un proyecto primero para agregar módulos.'
      );
      return;
    }
    const nuevoModulo: GastoOperacionExtendido = {
      tipo: 'modulo',
      codigo: '',
      nombre: '',
      esNuevo: true,
      editar: false,
    };
    this.items.push(nuevoModulo);
    this.ordenarItemsPorModulos();
    this.items = [...this.items];
  }
  registrarModulo(index: number): void {
    const item = this.items[index];
    if (
      !this.identificadorGeneral ||
      !item.codigo?.trim() ||
      !item.nombre?.trim()
    ) {
      this.mostrarMensaje(
        'error',
        'Código y nombre del módulo son obligatorios o selecciona un proyecto primero.'
      );
      return;
    }
    const payload: Partial<Modulo> = {
      proyecto: this.identificadorGeneral,
      codigo: item.codigo.trim(),
      nombre: item.nombre.trim(),
      creado_por: this.usuario_id,
      modificado_por: this.usuario_id,
    };
    this.servicios.createModulo(payload).subscribe({
      next: (moduloCreado) => {
        this.items[index] = {
          ...item,
          id: moduloCreado.id,
          tipo: 'modulo_registrado',
          esNuevo: false,
          editar: false,
          editarModulo: false,
          moduloId: moduloCreado.id,
        };
        this.modulos.push(moduloCreado);
        this.modulosEnItems = this.modulos.map((mod) => ({
          id: mod.id,
          tipo: 'modulo_registrado' as const,
          codigo: mod.codigo,
          nombre: mod.nombre,
          esNuevo: false,
          editar: false,
          editarModulo: false,
          moduloId: mod.id,
        }));
        this.ordenarItemsPorModulos();
        this.items = [...this.items];
        this.mostrarMensaje('exito', 'Módulo registrado correctamente.');
      },
      error: (err) =>
        this.mostrarMensaje(
          'error',
          'Error al registrar módulo: ' +
            (err.error?.error || 'Verifica los datos.')
        ),
    });
  }
  editarModulo(index: number): void {
    if (this.items[index].tipo === 'modulo_registrado')
      this.items[index].editar = true;
  }
  actualizarModuloRegistrado(index: number): void {
    const item = this.items[index];
    if (
      item.tipo !== 'modulo_registrado' ||
      !item.editar ||
      !item.codigo?.trim() ||
      !item.nombre?.trim()
    ) {
      this.mostrarMensaje(
        'error',
        'Código y nombre del módulo son obligatorios.'
      );
      item.editar = false;
      return;
    }
    const payload: Partial<Modulo> = {
      codigo: item.codigo.trim(),
      nombre: item.nombre.trim(),
      modificado_por: this.usuario_id,
    };
    this.servicios.updateModulo(item.id!, payload).subscribe({
      next: (moduloActualizado) => {
        this.items[index] = {
          ...item,
          codigo: moduloActualizado.codigo,
          nombre: moduloActualizado.nombre,
          editar: false,
        };
        this.modulos = this.modulos.map((m) =>
          m.id === item.id ? moduloActualizado : m
        );
        this.modulosEnItems = this.modulosEnItems.map((m) =>
          m.id === item.id
            ? {
                ...m,
                codigo: moduloActualizado.codigo,
                nombre: moduloActualizado.nombre,
              }
            : m
        );
        this.ordenarItemsPorModulos();
        this.mostrarMensaje('exito', 'Módulo actualizado correctamente.');
      },
      error: (err) => {
        this.mostrarMensaje(
          'error',
          'Error al actualizar módulo: ' +
            (err.error?.error || 'Intente de nuevo.')
        );
        item.editar = false;
      },
    });
  }
  eliminarModulo(index: number): void {
    const item = this.items[index];
    if (item.tipo !== 'modulo_registrado') return;
    if (
      !confirm(
        `¿Eliminar módulo "${item.nombre}"? Los gastos se desasociarán (no se eliminarán).`
      )
    )
      return;
    this.servicios.deleteModulo(item.id!).subscribe({
      next: () => {
        this.modulos = this.modulos.filter((m) => m.id !== item.id);
        this.modulosEnItems = this.modulosEnItems.filter(
          (m) => m.id !== item.id
        );
        this.items.splice(index, 1);
        const gastosDelModulo = this.items.filter(
          (g) => g.moduloId === item.id && g.tipo === 'gasto'
        );
        gastosDelModulo.forEach((gasto) => {
          if (gasto.id) {
            gasto.moduloId = null;
            this.servicios.moverGastoAModulo(gasto.id, null).subscribe();
          }
        });
        this.ordenarItemsPorModulos();
        this.items = [...this.items];
        this.mostrarMensaje(
          'exito',
          'Módulo eliminado correctamente. Gastos desasociados.'
        );
      },
      error: (err) =>
        this.mostrarMensaje(
          'error',
          'Error al eliminar módulo: ' +
            (err.error?.error || 'Intente de nuevo.')
        ),
    });
  }
  cancelarEdicion(index: number): void {
    if (this.items[index].tipo === 'modulo_registrado')
      this.items[index].editar = false;
  }

  inicializarDropdowns() {
    const dropdownToggleElements =
      document.querySelectorAll('.dropdown-toggle');
    dropdownToggleElements.forEach((dropdownToggleEl) => {
      if (
        dropdownToggleEl.id === 'dropdownFinanciero' ||
        dropdownToggleEl.id === 'dropdownReportesTipo'
      ) {
        return; // Salta; se inicializan en métodos específicos
      }
      if (!bootstrap.Dropdown.getInstance(dropdownToggleEl)) {
        new bootstrap.Dropdown(dropdownToggleEl, { autoClose: 'outside' });
      }
    });
    console.log(
      'DEBUG: Dropdowns principales de Bootstrap inicializados (subs excluidos).'
    );
  }

  // Métodos Auxiliares
  obtenerNombreModulo(modulo: Modulo | null): string {
    return modulo ? `${modulo.codigo} - ${modulo.nombre}` : 'Sin módulo';
  }

  getGastosCount(moduloId: number): number {
    return this.items.filter(
      (item) => item.tipo === 'gasto' && item.moduloId === moduloId
    ).length;
  }

  // Métodos de Ítems/Gastos (CRUD y Gestión)
  agregarItem(): void {
    if (!this.identificadorGeneral) {
      this.mostrarMensaje(
        'error',
        'Selecciona o registra un proyecto primero para agregar ítems.'
      );
      this.abrirModalParametros(false);
      return;
    }
    this.items.push({
      descripcion: '',
      unidad: '',
      cantidad: 0,
      precio_unitario: 0,
      precio_literal: '',
      esNuevo: true,
      editarModulo: true,
      editarUnidad: true,
      tipo: 'gasto',
      modulo: null,
      moduloId: null,
    });
    this.ordenarItemsPorModulos();
    this.unidadesFiltradas.push([...this.unidadesUsadas]);
    this.mostrarLista.push(false);
    this.descripcionesFiltradas.push([...this.descripcionesUsadas]);
    this.mostrarListaDescripcion.push(false);
  }

  registrarItem(index: number): void {
    const item = this.items[index];
    if (!this.identificadorGeneral) {
      this.mostrarMensaje('error', 'Selecciona un proyecto primero.');
      return;
    }
    const payload: Partial<GastoOperacion> & { modulo_id?: number | null } = {
      ...item,
      identificador: {
        ...this.proyectoData,
        id_general: this.identificadorGeneral,
        NombreProyecto: this.nombreProyecto?.trim() ?? '',
      } as Proyecto,
      modulo_id: item.moduloId ?? null,
      creado_por: this.usuario_id,
      modificado_por: this.usuario_id,
    };
    delete payload.modulo;
    this.servicios.createGastoOperacion([payload]).subscribe({
      next: (res) => {
        this.items[index] = {
          ...res.gastos[0],
          esNuevo: false,
          editarModulo: false,
          moduloId: res.gastos[0].modulo?.id ?? null,
        };
        if (res.gastos[0].unidad)
          this.agregarUnidadSiNoExiste(res.gastos[0].unidad);
        if (res.gastos[0].descripcion)
          this.agregarDescripcionSiNoExiste(res.gastos[0].descripcion);
        this.mostrarMensaje('exito', 'Ítem registrado correctamente.');
      },
      error: (err) =>
        this.mostrarMensaje(
          'error',
          'Error al registrar el ítem: ' +
            (err.error?.error || 'Verifica los datos enviados')
        ),
    });
  }

  actualizarItem(index: number): void {
    const item = this.items[index];
    const payload: Partial<GastoOperacion> & { modulo_id?: number | null } = {
      ...item,
      cantidad: Number(item.cantidad),
      precio_unitario: Number(item.precio_unitario),
      modulo_id: item.moduloId ?? null,
      modificado_por: this.usuario_id,
      id: item.id,
    };
    delete payload.modulo;
    this.servicios.updateGastoOperacion(payload).subscribe({
      next: (updatedItem) => {
        this.items[index] = {
          ...item,
          ...updatedItem,
          esNuevo: false,
          editarModulo: false,
          moduloId: updatedItem.modulo?.id ?? null,
        };
        if (updatedItem.unidad && updatedItem.unidad !== item.unidad)
          this.agregarUnidadSiNoExiste(updatedItem.unidad);
        if (
          updatedItem.descripcion &&
          updatedItem.descripcion !== item.descripcion
        )
          this.agregarDescripcionSiNoExiste(updatedItem.descripcion);
        this.cdr.detectChanges();
        this.mostrarMensaje('exito', 'Ítem actualizado correctamente.');
      },
      error: (err) =>
        this.mostrarMensaje(
          'error',
          'Error al actualizar el ítem: ' +
            (err.error?.error || 'Verifica los datos enviados')
        ),
    });
  }

  eliminarItem(index: number): void {
    const item = this.items[index];
    if (!item.id) {
      this.items.splice(index, 1);
      this.mostrarMensaje('exito', 'Ítem eliminado.');
      return;
    }
    this.mensajeConfirmacion = '¿Seguro que deseas eliminar este ítem?';
    this.tipoConfirmacion = 'item';
    this.itemIndexAEliminar = index;
    this.mostrarConfirmacion = true;
  }

  actualizarItemEnTiempoReal(item: GastoOperacionExtendido): void {
    if (!item.id) return;
    const index = this.items.findIndex((i) => i === item);
    if (index === -1) return;
    const payload: Partial<GastoOperacion> & { modulo_id?: number | null } = {
      ...item,
      cantidad: Number(item.cantidad),
      precio_unitario: Number(item.precio_unitario),
      modulo_id: item.moduloId ?? null,
      modificado_por: this.usuario_id,
      id: item.id,
    };
    delete payload.modulo;
    this.servicios.updateGastoOperacion(payload).subscribe({
      next: (updatedItem) => {
        this.items[index] = {
          ...item,
          ...updatedItem,
          esNuevo: false,
          editarModulo: false,
          moduloId: updatedItem.modulo?.id ?? null,
        };
      },
      error: (err) =>
        this.mostrarMensaje(
          'error',
          'Error al actualizar ítem: ' +
            (err.error?.error || 'Intente de nuevo')
        ),
    });
  }

  // REFACTORIZACIÓN: Completada la condición incompleta y optimizada para consistencia - actualizarModulo
  actualizarModulo(item: GastoOperacionExtendido): void {
    if (item.moduloId === null || item.moduloId === undefined) {
      item.modulo = null;
    } else {
      item.modulo = this.modulos.find((m) => m.id === item.moduloId) || null;
    }
    if (item.id && !item.esNuevo) {
      this.actualizarItem(this.items.indexOf(item));
    }
  }

  obtenerNumero(index: number): number {
    return this.items
      .slice(0, index + 1)
      .filter((item) => item.tipo === 'gasto').length;
  }

  // Métodos de Drag-Drop y UI
  drop(event: CdkDragDrop<any[]>) {
    moveItemInArray(this.items, event.previousIndex, event.currentIndex);
    const itemMovido = this.items[event.currentIndex];
    if (itemMovido.tipo === 'gasto' && event.currentIndex > 0) {
      const moduloAnterior = this.items[event.currentIndex - 1];
      if (moduloAnterior.tipo === 'modulo_registrado') {
        itemMovido.moduloId = moduloAnterior.id;
        if (itemMovido.id) this.actualizarItem(event.currentIndex);
      }
    }
    this.ordenarItemsPorModulos();
    this.items = [...this.items];
  }

  ordenarItemsPorModulos(): void {
    const modulosRegistrados = this.items.filter(
      (item) => item.tipo === 'modulo_registrado'
    );
    const modulosTemporales = this.items.filter(
      (item) => item.tipo === 'modulo'
    );
    const gastos = this.items.filter((item) => item.tipo === 'gasto');
    const itemsOrdenados: GastoOperacionExtendido[] = [];
    modulosRegistrados.sort((a, b) => (a.id! > b.id! ? 1 : -1));
    modulosTemporales.sort(
      (a, b) => this.items.indexOf(a) - this.items.indexOf(b)
    );
    if (modulosRegistrados.length > 0 || modulosTemporales.length > 0) {
      modulosRegistrados.forEach((modulo) => {
        itemsOrdenados.push(modulo);
        const gastosDelModulo = gastos.filter((g) => g.moduloId === modulo.id);
        gastosDelModulo.sort((a, b) => (a.id! > b.id! ? 1 : -1));
        itemsOrdenados.push(...gastosDelModulo);
      });
      itemsOrdenados.push(...modulosTemporales);
      const gastosSinModulo = gastos.filter((g) => !g.moduloId);
      gastosSinModulo.sort((a, b) => (a.id! > b.id! ? 1 : -1));
      itemsOrdenados.push(...gastosSinModulo);
    } else {
      gastos.sort((a, b) => (a.id! > b.id! ? 1 : -1));
      itemsOrdenados.push(...gastos);
    }
    this.items = itemsOrdenados;
  }

  abrirModalMover(index: number): void {
    this.itemIndexAMover = index;
    this.moduloSeleccionado = this.items[index].modulo?.id ?? null;
    if (!this.items[index].id) {
      this.mostrarMensaje(
        'error',
        'Registra el ítem primero para asociarlo a un módulo.'
      );
      return;
    }
    this.modalMover.show();
  }

  confirmarMoverModulo(): void {
    if (this.itemIndexAMover === null || !this.items[this.itemIndexAMover].id)
      return;
    const gastoId = this.items[this.itemIndexAMover].id!;
    this.servicios
      .moverGastoAModulo(gastoId, this.moduloSeleccionado)
      .subscribe({
        next: (gastoActualizado) => {
          const item = this.items[this.itemIndexAMover!];
          item.modulo =
            this.modulos.find((m) => m.id === this.moduloSeleccionado) || null;
          item.moduloId = this.moduloSeleccionado;
          this.mostrarMensaje('exito', 'Gasto asociado correctamente.');
          this.modalMover.hide();
          this.ordenarItemsPorModulos();
          this.items = [...this.items];
        },
        error: (err) => {
          this.mostrarMensaje(
            'error',
            'Error al asociar gasto: ' +
              (err.error?.error || 'Intente de nuevo.')
          );
          this.modalMover.hide();
        },
      });
  }

  moverItem() {
    if (this.itemIndexAMover === null) return;
    let toIndex = this.nuevaPosicion - 1;
    if (toIndex < 0) toIndex = 0;
    if (toIndex >= this.items.length) toIndex = this.items.length - 1;
    const [item] = this.items.splice(this.itemIndexAMover, 1);
    this.items.splice(toIndex, 0, item);
    this.items = [...this.items];
    this.modalMover.hide();
  }

  @HostListener('document:click', ['$event'])
  clickFuera(event: Event): void {
    const target = event.target as HTMLElement;
    if (!target.closest('.proyecto-dropdown')) {
      this.mostrarDropdownProyectos = false;
    }
  }

  // Métodos de Confirmación y Mensajes
  confirmarEliminacion(): void {
    const index = this.itemIndexAEliminar!;
    const item = this.items[index];
    if (item.tipo === 'modulo') {
      this.items.splice(index, 1);
      this.mostrarMensaje('exito', 'Módulo temporal eliminado.');
    } else if (item.tipo === 'modulo_registrado') {
      this.eliminarModulo(index);
    } else if (item.tipo === 'gasto' && item.id) {
      this.servicios.deleteGastoOperacion(item.id).subscribe({
        next: () => {
          this.items.splice(index, 1);
          this.mostrarMensaje('exito', 'Gasto eliminado correctamente.');
          this.ordenarItemsPorModulos();
          this.items = [...this.items];
        },
        error: (err) =>
          this.mostrarMensaje(
            'error',
            'Error al eliminar gasto: ' +
              (err.error?.error || 'Intente de nuevo.')
          ),
      });
    } else {
      this.items.splice(index, 1);
      this.mostrarMensaje('exito', 'Ítem eliminado.');
    }
    this.mostrarConfirmacion = false;
    this.itemIndexAEliminar = null;
    this.tipoConfirmacion = null;
    if (item.tipo !== 'gasto' || !item.id) {
      this.ordenarItemsPorModulos();
      this.items = [...this.items];
    }
    this.unidadesFiltradas = this.items.map(() => [...this.unidadesUsadas]);
    this.mostrarLista = this.items.map(() => false);
    this.descripcionesFiltradas = this.items.map(() => [
      ...this.descripcionesUsadas,
    ]);
    this.mostrarListaDescripcion = this.items.map(() => false);
  }

  manejarAceptar() {
    this.mostrarConfirmacion = false;
    if (this.tipoConfirmacion === 'proyecto') {
      if (this.identificadorGeneral === 0) {
        this.registrarProyecto();
      } else {
        this.servicios
          .deleteIdentificadorGeneral(this.identificadorGeneral)
          .subscribe({
            next: () => {
              this.servicios.getIdentificadorGeneral().subscribe({
                next: (proyectos) => {
                  this.listaProyectos = proyectos;
                  this.filtrarProyectos();
                },
                error: () =>
                  this.mostrarMensaje('error', 'Error al recargar proyectos.'),
              });
              this.asignarProyecto(null);
              this.mostrarMensaje('exito', 'Proyecto eliminado correctamente.');
            },
            error: () =>
              this.mostrarMensaje('error', 'Error al eliminar el proyecto.'),
          });
      }
    } else if (
      this.tipoConfirmacion === 'item' &&
      this.itemIndexAEliminar !== null
    ) {
      const item = this.items[this.itemIndexAEliminar];
      this.servicios.deleteGastoOperacion(item.id!).subscribe({
        next: () => {
          this.mostrarMensaje('exito', 'Ítem eliminado correctamente.');
          this.items.splice(this.itemIndexAEliminar!, 1);
        },
        error: () => this.mostrarMensaje('error', 'Error al eliminar el ítem.'),
      });
      this.confirmarEliminacion();
    }
    this.tipoConfirmacion = null;
    this.itemIndexAEliminar = null;
  }

  manejarCancelar() {
    this.mostrarConfirmacion = false;
    this.tipoConfirmacion = null;
    this.itemIndexAEliminar = null;
  }

  manejarOk() {
    this.mensajeExito = '';
  }

  manejarError() {
    this.mensajeError = '';
  }

  private mostrarMensaje(
    tipo: 'exito' | 'error',
    mensaje: string,
    duracion = 20000
  ) {
    if (tipo === 'exito') this.mensajeExito = mensaje;
    else this.mensajeError = mensaje;
    setTimeout(() => {
      if (tipo === 'exito') this.mensajeExito = '';
      else this.mensajeError = '';
    }, duracion);
  }

  private mostrarModalExito(mensaje: string, duracion = 2000) {
    this.mensajeExito = mensaje;
    const modalEl = document.getElementById('modalOk');
    const modal = new bootstrap.Modal(modalEl);
    modal.show();
    setTimeout(() => modal.hide(), duracion);
  }

  private mostrarModalError(mensaje: string, duracion = 2000) {
    this.mensajeError = mensaje;
    const modalEl = document.getElementById('modalError');
    const modal = new bootstrap.Modal(modalEl);
    modal.show();
    setTimeout(() => modal.hide(), duracion);
  }

  private validarProyectoCompleto(): boolean {
    for (const key in this.proyectoData) {
      if (
        this.proyectoData[key as keyof Proyecto] === null ||
        this.proyectoData[key as keyof Proyecto] === ''
      ) {
        this.mostrarMensaje('error', 'Completa todos los campos');
        return false;
      }
    }
    return true;
  }

  // Getters y Cálculos
  get mostrarColumnaModulo(): boolean {
    return this.items.some(
      (item) =>
        item.tipo === 'gasto' && (!item.moduloId || item.moduloId === null)
    );
  }

  get totalLiteral(): string {
    return NumeroALetras.convertirConDecimal(this.total);
  }

  get totalGastosOperacionGeneral(): number {
    return this.items
      .filter(
        (item) =>
          item.tipo === 'gasto' &&
          item.id &&
          this.toNum(item.precio_unitario) > 0
      )
      .reduce((acc, item) => acc + this.toNum(item.precio_unitario), 0);
  }

  get totalValorAgregado(): number {
    return this.items
      .filter(
        (item) =>
          item.tipo === 'gasto' &&
          item.id &&
          this.toNum(item.precio_unitario) > 0
      )
      .reduce((acc, item) => acc + this.getValorAgregado(item), 0);
  }

  // Getters y Cálculos (continuación)
  get total(): number {
    return this.items
      .filter((item) => item.tipo === 'gasto' && item.id) // REFACTORIZACIÓN: Ignora temporales para consistencia
      .reduce(
        (acc, item) =>
          acc + this.MultiplicacionPrecioUnitarioActividadPORcantidad(item),
        0
      );
  }

  getCostoVenta(item: GastoOperacionExtendido): number {
    const precio = this.toNum(item.precio_unitario);
    const ivaNominal = this.toNum(this.proyectoData.iva_tasa_nominal);
    const porcentajeGlobal = this.toNum(
      this.proyectoData.porcentaje_global_100
    );
    return precio - precio * (ivaNominal / porcentajeGlobal); // REFACTORIZACIÓN: Simplificada fórmula para claridad
  }

  getMargenUtilidad(item: GastoOperacionExtendido): number {
    if (this.toNum(this.proyectoData.a_costo_venta) === 0) return 0;
    const margen = this.toNum(this.proyectoData.b_margen_utilidad);
    const aCosto = this.toNum(this.proyectoData.a_costo_venta);
    const porcentajeGlobal = this.toNum(
      this.proyectoData.porcentaje_global_100
    );
    return (
      (margen / porcentajeGlobal / (aCosto / porcentajeGlobal)) *
      this.getCostoVenta(item)
    );
  }

  getIvaEfectivaCalculo(): number {
    const ivaNominal = this.toNum(this.proyectoData.iva_tasa_nominal);
    const aCosto = this.toNum(this.proyectoData.a_costo_venta);
    const margen = this.toNum(this.proyectoData.b_margen_utilidad);
    return ivaNominal / (aCosto + margen);
  }

  getIvaEfectiva(item: GastoOperacionExtendido): number {
    return (
      (this.getCostoVenta(item) + this.getMargenUtilidad(item)) *
      this.getIvaEfectivaCalculo()
    );
  }

  getPrecioFactura(item: GastoOperacionExtendido): number {
    return (
      this.getCostoVenta(item) +
      this.getMargenUtilidad(item) +
      this.getIvaEfectiva(item)
    );
  }

  getValorAgregado(item: GastoOperacionExtendido): number {
    const valor =
      this.getPrecioFactura(item) - this.toNum(item.precio_unitario);
    return this.roundTo(valor, 2);
  }

  SumaPrecioUnitarioActividad(item: GastoOperacionExtendido): number {
    return this.roundTo(
      this.toNum(item.precio_unitario) + this.getValorAgregado(item),
      2
    );
  }

  MultiplicacionPrecioUnitarioActividadPORcantidad(
    item: GastoOperacionExtendido
  ): number {
    return this.roundTo(
      this.SumaPrecioUnitarioActividad(item) * this.toNum(item.cantidad),
      2
    );
  }

  // Métodos de Navegación y Exportación
  enviarAEcuacion(item: GastoOperacionExtendido): void {
    const params: any = {
      proyecto: this.nombreProyecto || '',
      id_gasto_operaciones: item.id || 0,
      descripcion: item.descripcion || '',
      unidad: item.unidad || '',
      cantidad: item.cantidad || 0,
      precio_unitario: item.precio_unitario || 0,
      precio_literal: item.precio_literal || '',
      identificadorGeneral: this.identificadorGeneral || 0,
      carga_social: this.carga_social || 0,
      iva_efectiva: this.iva_efectiva || 0,
      herramientas: this.herramientas || 0,
      gastos_generales: this.gastos_generales || 0,
      porcentaje_global_100: this.porcentaje_global_100 || 0,
    };
    this.router.navigate(['panel-control/CrearEcuacion'], {
      queryParams: params,
    });
  }

  enviarTotalGastosGenerales(item: GastoOperacionExtendido): void {
    const params: any = {
      id_gasto_operaciones: item.id || 0,
      precio_unitario: item.precio_unitario || 0,
      identificadorGeneral: this.identificadorGeneral || 0,
      iva_tasa_nominal: this.iva_tasa_nominal || 0,
      it: this.it || 0,
      iue: this.iue || 0,
      ganancia: this.ganancia || 0,
      a_costo_venta: this.a_costo_venta || 0,
      b_margen_utilidad: this.b_margen_utilidad || 0,
      porcentaje_global_100: this.porcentaje_global_100 || 0,
    };
    this.router.navigate(['panel-control/PrecioFactura'], {
      queryParams: params,
    });
  }

  enviarTotalesAFactura(): void {
    const params: any = {
      identificadorGeneral: this.identificadorGeneral || 0,
      totalGastosOperacion: this.totalGastosOperacionGeneral,
      totalValorAgregado: this.totalValorAgregado,
      totalFactura: this.total,
      iva_tasa_nominal: this.iva_tasa_nominal || 0,
      it: this.it || 0,
      iue: this.iue || 0,
      ganancia: this.ganancia || 0,
      a_costo_venta: this.a_costo_venta || 0,
      b_margen_utilidad: this.b_margen_utilidad || 0,
      porcentaje_global_100: this.porcentaje_global_100 || 0,
    };
    this.router.navigate(['panel-control/PrecioFactura'], {
      queryParams: params,
    });
  }

  exportPDFFactura() {
    this.exportService.generatePDF('contentToExport', 'factura.pdf');
  }

  getGastosRegistrados(): GastoOperacionExtendido[] {
    return this.items
      .filter((item) => item.tipo === 'gasto' && item.id)
      .sort((a, b) => (a.id! > b.id! ? 1 : -1));
  }

  obtenerNumeroParaGasto(indice: number): number {
    return indice + 1;
  }

  generarReporteFinanciero(item: GastoOperacionExtendido): void {
    if (!item.id || !this.identificadorGeneral || !this.nombreProyecto) {
      this.mostrarMensaje(
        'error',
        'No se puede generar el reporte: Gasto o proyecto no válido.'
      );
      return;
    }
    const params = {
      id_gasto_operaciones: item.id,
      descripcion: item.descripcion || 'Sin descripción',
      precio_unitario: Number(item.precio_unitario) || 0,
      unidad: item.unidad || 'N/A',
      cantidad: Number(item.cantidad) || 0,
      identificadorGeneral: this.identificadorGeneral,
      iva_tasa_nominal: this.iva_tasa_nominal || 0,
      it: this.it || 0,
      iue: this.iue || 0,
      ganancia: this.ganancia || 0,
      a_costo_venta: this.a_costo_venta || 0,
      b_margen_utilidad: this.b_margen_utilidad || 0,
      porcentaje_global_100: this.porcentaje_global_100 || 100,
      nombreProyecto: this.nombreProyecto,
      fechaReporte: new Date().toLocaleDateString('es-BO'),
    };
    const safeDescripcion = (item.descripcion || 'gasto')
      .replace(/[^a-zA-Z0-9]/g, '_')
      .substring(0, 20);
    const fileName = `reporte-financiero-${this.nombreProyecto.replace(
      /[^a-zA-Z0-9]/g,
      '_'
    )}-${safeDescripcion}.pdf`;
    this.exportService
      .generatePDFFinanciero(params, fileName)
      .then(() => {
        this.mostrarMensaje(
          'exito',
          `Reporte financiero generado para "${item.descripcion}".`
        );
      })
      .catch((error) => {
        console.error('Error generando PDF financiero:', error);
        this.mostrarMensaje(
          'error',
          'Error al generar el reporte financiero. Ver consola.'
        );
      });
  }

  @HostListener('document:click', ['$event'])
  handleClickOutside(event: Event): void {
    const target = event.target as HTMLElement;
    const listaUnidades = document.querySelectorAll('.unidad-list');
    const listaDescripciones = document.querySelectorAll('.descripcion-list');
    const esDentroUnidad = Array.from(listaUnidades).some((el) =>
      el.contains(target)
    );
    const esDentroDescripcion = Array.from(listaDescripciones).some((el) =>
      el.contains(target)
    );
    const esInputUnidad = target.classList.contains('input-unidad');
    const esInputDescripcion = target.classList.contains('input-descripcion');
    if (!esDentroUnidad && !esInputUnidad && !this.seleccionando) {
      this.mostrarLista = this.mostrarLista.map(() => false);
    }
    if (!esDentroDescripcion && !esInputDescripcion && !this.seleccionando) {
      this.mostrarListaDescripcion = this.mostrarListaDescripcion.map(
        () => false
      );
    }
    if (!target.closest('.proyecto-dropdown')) {
      this.mostrarDropdownProyectos = false;
    }
  }

  filtrarDescripciones(index: number, event: Event): void {
    const valor = (event.target as HTMLInputElement).value.toLowerCase();
    this.descripcionesFiltradas[index] = this.descripcionesUsadas.filter((d) =>
      d.toLowerCase().includes(valor)
    );
    this.items[index].descripcion = valor;
  }

  mostrarDescripcionesFila(index: number): void {
    this.mostrarListaDescripcion = this.mostrarListaDescripcion.map(
      () => false
    );
    this.mostrarListaDescripcion[index] = true;
    this.descripcionesFiltradas[index] = [...this.descripcionesUsadas];
  }

  seleccionarDescripcion(index: number, descripcion: string): void {
    this.items[index].descripcion = descripcion;
    const gasto = this.catalogoGastos.find(
      (g) => g.descripcion === descripcion
    );
    if (gasto && this.items[index].precio_unitario === undefined) {
      this.items[index].precio_unitario = gasto.ultimo_precio;
      this.onPrecioUnitarioChange(index);
    }
    this.mostrarListaDescripcion[index] = false;
  }

  guardarDescripcionPersonalizada(index: number, event: Event): void {
    const input = event.target as HTMLInputElement;
    const valor = input.value.trim();
    if (valor) {
      this.items[index].descripcion = valor;
      this.agregarDescripcionSiNoExiste(valor);
    } else {
      this.items[index].descripcion = '';
    }
  }

  filtrarUnidades(index: number, event: Event): void {
    const valor = (event.target as HTMLInputElement).value.toLowerCase();
    this.unidadesFiltradas[index] = this.unidadesUsadas.filter((u) =>
      u.toLowerCase().includes(valor)
    );
    this.items[index].unidad = valor;
  }

  mostrarUnidadesFila(index: number): void {
    this.seleccionando = false;
    this.mostrarLista = this.mostrarLista.map(() => false);
    this.mostrarLista[index] = true;
    this.unidadesFiltradas[index] = [...this.unidadesUsadas];
  }

  seleccionarUnidad(index: number, unidad: string): void {
    this.seleccionando = true;
    this.items[index].unidad = unidad;
    if (this.items[index].id && !this.items[index].esNuevo) {
      this.actualizarItemEnTiempoReal(this.items[index]);
    }
    setTimeout(() => {
      this.mostrarLista[index] = false;
      this.seleccionando = false;
    }, 100);
  }

  guardarUnidadPersonalizada(index: number, event: Event): void {
    if (this.seleccionando) return;
    const input = event.target as HTMLInputElement;
    const valor = input.value.trim();
    if (valor) {
      this.items[index].unidad = valor;
      this.agregarUnidadSiNoExiste(valor);
    } else {
      this.items[index].unidad = '';
    }
  }

  generarPDFMaterialesProyecto(): void {
    if (!this.identificadorGeneral || !this.nombreProyecto) {
      this.mostrarMensaje(
        'error',
        'Selecciona un proyecto primero para generar el PDF.'
      );
      return;
    }
    this.exportService.generatePDFMaterialesProyecto(
      this.identificadorGeneral,
      this.nombreProyecto
    );
  }

  generatePDFManoDeObraProyecto(): void {
    if (!this.identificadorGeneral || !this.nombreProyecto) {
      this.mostrarMensaje(
        'error',
        'Selecciona un proyecto primero para generar el PDF.'
      );
      return;
    }
    this.exportService.generatePDFManoDeObraProyecto(
      this.identificadorGeneral,
      this.nombreProyecto
    );
  }

  generatePDFEquipoHerramientaProyecto(): void {
    if (!this.identificadorGeneral || !this.nombreProyecto) {
      this.mostrarMensaje(
        'error',
        'Selecciona un proyecto primero para generar el PDF.'
      );
      return;
    }
    this.exportService.generatePDFEquipoHerramientaProyecto(
      this.identificadorGeneral,
      this.nombreProyecto
    );
  }

  private inicializarSubDropdownFinanciero(): void {
    const trigger = document.getElementById(
      'dropdownFinanciero'
    ) as HTMLElement;
    const subMenu = trigger?.parentElement?.querySelector(
      'ul.dropdown-menu'
    ) as HTMLElement;
    if (!trigger || !subMenu) {
      console.warn(
        'DEBUG: No se encontró el trigger o sub-menú de Financiero.'
      );
      return;
    }
    if (!bootstrap.Dropdown.getInstance(trigger)) {
      new bootstrap.Dropdown(trigger, {
        autoClose: 'outside',
        boundary: 'viewport',
        popper: false,
      });
    }
    const globalClickHandler = (event: MouseEvent) => {
      const target = event.target as HTMLElement;
      if (
        subMenu.classList.contains('show') &&
        !trigger.contains(target) &&
        !subMenu.contains(target)
      ) {
        bootstrap.Dropdown.getInstance(trigger)?.hide();
        subMenu.classList.remove('show');
        trigger.setAttribute('aria-expanded', 'false');
      }
    };
    document.addEventListener('click', globalClickHandler);
  }
  private inicializarSubDropdownTipo(): void {
    const trigger = document.getElementById(
      'dropdownReportesTipo'
    ) as HTMLElement;
    const subMenu = trigger?.parentElement?.querySelector(
      'ul.dropdown-menu'
    ) as HTMLElement;
    if (!trigger || !subMenu) {
      console.warn('DEBUG: No se encontró el trigger o sub-menú de Tipo.');
      return;
    }
    if (!bootstrap.Dropdown.getInstance(trigger)) {
      new bootstrap.Dropdown(trigger, {
        autoClose: 'outside',
        boundary: 'viewport',
        popper: false,
      });
    }
    const globalClickHandler = (event: MouseEvent) => {
      // REFACTORIZACIÓN: Completada la función y optimizada para consistencia
      const target = event.target as HTMLElement;
      if (
        subMenu.classList.contains('show') &&
        !trigger.contains(target) &&
        !subMenu.contains(target)
      ) {
        const dropdown = bootstrap.Dropdown.getInstance(trigger);
        if (dropdown) {
          dropdown.hide();
        } else {
          subMenu.classList.remove('show');
          trigger.setAttribute('aria-expanded', 'false');
        }
        console.log('DEBUG: Sub-menú Tipo cerrado por click fuera.');
      }
    };
    if ((document as any)._tipoGlobalClick) {
      document.removeEventListener('click', (document as any)._tipoGlobalClick);
    }
    document.addEventListener('click', globalClickHandler);
    (document as any)._tipoGlobalClick = globalClickHandler;
    console.log(
      'DEBUG: Sub-dropdown Tipo inicializado (solo clicks via Bootstrap).'
    );
  }

  generarReporteGeneralPDF(): void {
    if (!this.identificadorGeneral || !this.nombreProyecto) {
      this.mostrarMensaje(
        'error',
        'Selecciona un proyecto válido para generar el reporte general.'
      );
      return;
    }
    const params: any = {
      identificadorGeneral: this.identificadorGeneral,
      nombreProyecto: this.nombreProyecto,
      totalGastosOperacion: this.totalGastosOperacionGeneral,
      totalValorAgregado: this.totalValorAgregado,
      totalFactura: this.total,
      iva_tasa_nominal: this.iva_tasa_nominal || 0,
      it: this.it || 0,
      iue: this.iue || 0,
      ganancia: this.ganancia || 0,
      a_costo_venta: this.a_costo_venta || 0,
      b_margen_utilidad: this.b_margen_utilidad || 0,
      porcentaje_global_100: this.porcentaje_global_100 || 100,
      fechaReporte: new Date().toLocaleDateString('es-BO'),
    };
    const fileName = `Reporte_General_${this.nombreProyecto.replace(
      /[^a-zA-Z0-9]/g,
      '_'
    )}_${this.identificadorGeneral}.pdf`;
    this.exportService
      .generatePDFReporteGeneral(params, fileName)
      .then(() => {
        this.mostrarMensaje(
          'exito',
          `Reporte general PDF generado para "${this.nombreProyecto}".`
        );
      })
      .catch((error) => {
        console.error('Error al generar el PDF de Reporte General:', error);
        this.mostrarMensaje(
          'error',
          'Error al generar el reporte general. Ver consola para detalles.'
        );
      });
  }

  // Nuevo método: Genera PDF de Gastos de Operación por Módulos
  generatePDFGastosOperacionProyecto(): void {
    if (!this.identificadorGeneral || !this.nombreProyecto) {
      this.mostrarMensaje(
        'error',
        'Selecciona un proyecto primero para generar el PDF.'
      );
      return;
    }
    this.exportService
      .generatePDFGastosOperacionProyecto(
        this.identificadorGeneral,
        this.nombreProyecto
      )
      .then(() => {
        this.mostrarMensaje(
          'exito',
          `PDF de Gastos de Operación generado para "${this.nombreProyecto}".`
        );
      })
      .catch((error) => {
        console.error('Error generando PDF de Gastos de Operación:', error);
        this.mostrarMensaje(
          'error',
          'Error al generar el PDF. Ver consola para detalles.'
        );
      });
  }

  // Actualizado: Usa el wrapper para generar PDF específico
  exportPDFGeneral(): void {
    this.generatePDFGastosOperacionProyecto();
  }

  // Métodos de Validación y Utilidades
  toNum(valor: any): number {
    return Number(valor) || 0;
  }

  roundTo(valor: number, decimales: number = 2): number {
    const factor = Math.pow(10, decimales);
    return Math.round(valor * factor) / factor;
  }

  private twoDecimals(value: number): number {
    return Number(value.toFixed(2));
  }

  formatearNumero(valor: number): string {
    return new Intl.NumberFormat('es-BO', {
      minimumFractionDigits: 2,
      maximumFractionDigits: 2,
    }).format(valor);
  }

  validarFormatoDecimal(item: any): void {
    const valor = item.precio_unitario;
    const regex = /^\d+(\.\d{1,2})?$/;
    if (valor?.toString().startsWith('00') || !regex.test(valor?.toString())) {
      item.precio_unitario = 0;
      this.formatoInvalido = !regex.test(valor?.toString());
    } else {
      this.formatoInvalido = false;
    }
  }

  onPrecioUnitarioChange(index: number): void {
    const item = this.items[index];
    this.validarFormatoDecimal(item);
    if (item.precio_unitario != undefined) {
      item.precio_literal = NumeroALetras.convertirConDecimal(
        this.SumaPrecioUnitarioActividad(item)
      );
    }
    this.cdr.detectChanges();
  }

  eliminarProyecto(): void {
    if (!this.identificadorGeneral) {
      this.mostrarModalError('Selecciona un proyecto para eliminar.');
      return;
    }
    this.mensajeConfirmacion =
      '¿Seguro que deseas eliminar este proyecto y todos sus registros asociados?';
    this.tipoConfirmacion = 'proyecto';
    this.mostrarConfirmacion = true;
  }

  cargarUnidadesGasto(): void {
    this.servicios.getUnidadesGastoOperacion().subscribe({
      next: (res) => (this.unidadesUsadas = res || []),
      error: (err) =>
        console.error('Error cargando unidades de gastos desde BD:', err),
    });
  }

  private cargarCatalogoGastos(): void {
    this.servicios.getGastosOperacion().subscribe({
      next: (gastos) => {
        this.catalogoGastos = gastos.map((g) => ({
          descripcion: g.descripcion.trim(),
          ultimo_precio: g.precio_unitario || 0,
        }));
        this.descripcionesUsadas = [
          ...new Set(gastos.map((g) => g.descripcion.trim())),
        ];
      },
      error: (err) =>
        console.error('Error cargando catálogo de gastos desde BD:', err),
    });
  }

  private agregarUnidadSiNoExiste(unidad: string): void {
    const normalizado = unidad.trim();
    if (normalizado && !this.unidadesUsadas.includes(normalizado)) {
      this.unidadesUsadas.push(normalizado);
      this.unidadesUsadas.sort();
    }
  }

  private agregarDescripcionSiNoExiste(descripcion: string): void {
    const normalizado = descripcion.trim();
    if (normalizado && !this.descripcionesUsadas.includes(normalizado)) {
      this.descripcionesUsadas.push(normalizado);
      this.descripcionesUsadas.sort();
    }
  }

  ///////////////////////////////////////////////////////////////////////////
  //Constructor y Propiedades Iniciales (No son métodos, pero relacionados)
}
