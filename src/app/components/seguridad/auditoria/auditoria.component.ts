import { Component, AfterViewInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';
import { ServiciosService } from '../../../services/servicios.service';
import { Atacante } from '../../../models/models';
import { AgCharts } from 'ag-charts-community';


@Component({
Â  selector: 'app-auditoria',
Â  standalone: true,
Â  imports: [CommonModule, FormsModule, RouterModule],
Â  templateUrl: './auditoria.component.html',
Â  styleUrls: ['./auditoria.component.css']
})
export class AuditoriaComponent implements AfterViewInit {
Â  ataques: Atacante[] = [];
Â  selectedAtacante: Atacante | null = null;

Â  // GrÃ¡ficas
Â  lineChart: any;
Â  // pieChart: any; // Eliminado

Â  // Filtros
Â  tiposAtaque: string[] = ['SQL', 'XSS', 'CSRF', 'DDoS', 'Keylogger', 'AuditorÃ­a', 'IA'];
Â  selectedTipo: string = '';
Â  filteredAtacantes: Atacante[] = [];

Â  // ResÃºmenes de estado (reemplazos de grÃ¡ficas)
Â  estadoResumen: string = 'Cargando resumen...'; // Bloqueados vs Activos
Â  tipoResumen: string = 'Cargando resumen de tipos...'; // DistribuciÃ³n por tipo

Â  // Iconos
Â  tipoIconos: { [key: string]: string } = {
Â  Â  'SQL': 'https://cdn-icons-png.flaticon.com/128/10961/10961459.png',
Â  Â  'XSS': 'https://cdn-icons-png.flaticon.com/128/13502/13502242.png',
Â  Â  'CSRF': 'https://cdn-icons-png.flaticon.com/128/4440/4440880.png',
Â  Â  'DDoS': 'https://cdn-icons-png.flaticon.com/128/6653/6653409.png',
Â  Â  'Keylogger': 'https://cdn-icons-png.flaticon.com/128/2842/2842036.png',
Â  Â  'AuditorÃ­a': 'https://cdn-icons-png.flaticon.com/128/4307/4307952.png',
Â  Â  'IA': 'https://cdn-icons-png.flaticon.com/128/14668/14668039.png'
Â  };

Â  // ðŸ”¹ Rango para la auditorÃ­a
Â  selectedRange: 'dia' | 'mes' | 'anio' = 'dia';

Â  constructor(private servicio: ServiciosService) {}

Â  ngAfterViewInit() {
Â  Â  this.cargarAtaques();
Â  }


cargarAtaques() {
Â  this.servicio.getAtaquesDB().subscribe((res: Atacante[]) => {
Â  Â  this.ataques = res;
Â  Â  this.filteredAtacantes = [...res];
Â  Â  if (res.length > 0) this.selectedAtacante = res[0];
Â  Â  this.updateCharts(); // Dibuja todo al inicio
Â  });
}

Â  seleccionarAtacante(atacante: Atacante) {
Â  Â  this.selectedAtacante = atacante;
Â  }

/**
Â * ðŸ’¡ FunciÃ³n para manejar el cambio de rango y actualizar grÃ¡ficas.
Â */
onRangeChange() {
Â  this.updateCharts();
}


filterByTipo(tipo: string) {
Â  this.selectedTipo = tipo;
Â  if (!tipo) {
Â  Â  this.filteredAtacantes = [...this.ataques];
Â  } else {
Â  Â  this.filteredAtacantes = this.ataques.filter(a => a.tipos.includes(tipo));
Â  }
Â  this.selectedAtacante = this.filteredAtacantes[0] || null;
Â  this.updateCharts();
}

Â  showAll() {
Â  Â  this.selectedTipo = '';
Â  Â  this.filteredAtacantes = [...this.ataques];
Â  Â  this.selectedAtacante = this.filteredAtacantes[0] || null;
Â  Â  this.updateCharts();
Â  }


toggleBloqueo(a: Atacante) {
Â  const nuevoEstado = !a.bloqueado;
Â  this.servicio.updateAtacanteBloqueo(a.id!, nuevoEstado).subscribe(() => {
Â  Â  a.bloqueado = nuevoEstado;
Â  Â  this.updateCharts();
Â  });
}

Â  getBadgeClass(a: Atacante) {
Â  Â  if (a.tipos.includes('SQL')) return 'bg-danger bg-opacity-25 text-dark';
Â  Â  if (a.tipos.includes('DDoS')) return 'bg-warning bg-opacity-25 text-dark';
Â  Â  if (a.tipos.includes('XSS')) return 'bg-info bg-opacity-25 text-dark';
Â  Â  return 'bg-secondary bg-opacity-25 text-dark';
Â  }

Â  // ðŸ”¹ Normalizar para Pie Chart (ahora para Resumen de Tipos)
Â  getTipoSummary() {
Â  Â  const counts: { [tipo: string]: number } = {};
Â  Â  this.filteredAtacantes.forEach(a => {
Â  Â  Â  a.tipos.forEach(t => {
Â  Â  Â  Â  counts[t] = (counts[t] || 0) + 1;
Â  Â  Â  });
Â  Â  });
    
    // Convertir el objeto de conteo a un string de resumen HTML
    const totalAtaques = this.filteredAtacantes.length;
    let resumen = `<strong>Total Ataques Reportados: ${totalAtaques}</strong><br>`;
    
    Object.keys(counts).sort((a, b) => counts[b] - counts[a]).forEach(tipo => {
        const count = counts[tipo];
        const porcentaje = totalAtaques > 0 ? ((count / totalAtaques) * 100).toFixed(1) : 0;
        resumen += `<span class="badge ${this.getBadgeClass({tipos: [tipo]} as Atacante)} me-2">${tipo}</span>: ${count} (${porcentaje}%)<br>`;
    });

Â  Â  return resumen;
Â  }

Â  // ðŸ”¹ Normalizar para Line Chart
Â  getTimeSeriesData() {
Â  Â  const ataquesTipos = ['SQL', 'XSS', 'CSRF', 'DDoS', 'Keylogger', 'IA']; 
Â  Â  const map: { [fecha: string]: { [tipo: string]: number } } = {};

Â  Â  this.filteredAtacantes.forEach(a => {
Â  Â  Â  const fecha = this.formatDate(a.fecha, this.selectedRange);
Â  Â  Â  if (!map[fecha]) map[fecha] = {};
Â  Â  Â  a.tipos.forEach(t => {
Â  Â  Â  Â  map[fecha][t] = (map[fecha][t] || 0) + 1;
Â  Â  Â  });
Â  Â  });

Â  Â  const data = Object.keys(map).map(fecha => ({ fecha, ...map[fecha] }));
Â  Â  data.sort((a, b) => a.fecha.localeCompare(b.fecha));
Â  Â  return data;
Â  }


Â  // ðŸ”¹ Resumen de Bloqueados vs Activos
getEstadoSummary() {
Â  const bloqueado = this.filteredAtacantes.filter(a => a.bloqueado).length;
Â  const activo = this.filteredAtacantes.length - bloqueado;
Â  return `Ataques Totales: ${this.filteredAtacantes.length} | Bloqueados: ${bloqueado} ðŸš« | Activos: ${activo} âœ…`;
}
Â  formatDate(fecha: string, rango: 'dia' | 'mes' | 'anio') {
Â  Â  const d = new Date(fecha);
Â  Â  switch (rango) {
Â  Â  Â  case 'dia': return d.toISOString().split('T')[0]; // YYYY-MM-DD
Â  Â  Â  case 'mes': return `${d.getFullYear()}-${('0'+(d.getMonth()+1)).slice(-2)}`; // YYYY-MM
Â  Â  Â  case 'anio': return `${d.getFullYear()}`;
Â  Â  }
Â  }


Â  updateCharts() {
Â  Â  // this.createPieChart(this.getPieData()); // Eliminado
Â  Â  this.createLineChart(this.getTimeSeriesData());
Â  Â  // Actualizar los textos de resumen
Â  Â  this.estadoResumen = this.getEstadoSummary();
    this.tipoResumen = this.getTipoSummary();
Â  }

// ðŸ’¡ createPieChart() ha sido eliminado

createLineChart(data: any[]) {
Â  const container = document.getElementById('myChart');
Â  if (!container) return;
Â  if (this.lineChart) this.lineChart.destroy();

Â  const series: any[] = Object.keys(data[0] || {})
Â  Â  .filter(k => k !== 'fecha')
Â  Â  .map(t => ({
Â  Â  Â  type: 'line',
Â  Â  Â  xKey: 'fecha',
Â  Â  Â  yKey: t,
Â  Â  Â  yName: t
Â  Â  }));


Â  this.lineChart = AgCharts.create({
Â  Â  container,
Â  Â  type: 'cartesian',
Â  Â  data,
Â  Â  series,
Â  Â  axes: [
Â  Â  Â  { type: 'category', position: 'bottom', title: { text: 'Fecha' } },
Â  Â  Â  { type: 'number', position: 'left', title: { text: 'Cantidad de ataques' } }
Â  Â  ],
Â  Â  tooltip: {
Â  Â  Â  enabled: true,
Â  Â  Â  renderer: (params: any) => {
Â  Â  Â  Â  let text = `Fecha: ${params.xValue}<br/>`;
Â  Â  Â  Â  params.series.forEach((s: any) => {
Â  Â  Â  Â  Â  text += `${s.seriesId}: ${s.yValue}<br/>`;
Â  Â  Â  Â  });
Â  Â  Â  Â  return { content: text };
Â  Â  Â  }
Â  Â  }
Â  });
}
// ðŸ’¡ El mÃ©todo createExtraChart() ha sido eliminado.
}