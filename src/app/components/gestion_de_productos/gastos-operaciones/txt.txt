import { CommonModule } from '@angular/common';
import { Component, OnInit } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { Router } from '@angular/router';
import { GastoOperacion } from '../../../models/models';
import { ServiciosService } from '../../../services/servicios.service';

@Component({
  selector: 'app-gastos-operaciones',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './gastos-operaciones.component.html',
  styleUrls: ['./gastos-operaciones.component.css'],
})
export class GastosOperacionesComponent implements OnInit {
  items: Partial<GastoOperacion>[] = [];
  gastosFiltrados: GastoOperacion[] = [];
  verDetalles: boolean = false;

  idBuscado: number = 0;

  constructor(private router: Router, private servicios: ServiciosService) {}

  ngOnInit(): void {
    this.cargarGastos(); // Cargar todos los gastos al inicializar el componente
  }

  cargarGastos(): void {
    this.servicios.getGastosOperacion().subscribe({
      next: (res) => {
        this.gastosFiltrados = res; // Asignar todos los gastos a gastosFiltrados
      },
      error: (err) => {
        console.error('Error al cargar gastos:', err);
        alert('Error al cargar los gastos.');
      },
    });
  }

  agregarNuevoItem(): void {
    this.items.push({
      descripcion: '',
      unidad: '',
      cantidad: 0,
      precio_unitario: 0,
      precio_literal: '',
    });
  }

  eliminarItem(index: number): void {
    this.items.splice(index, 1);
  }

  get total(): number {
    return this.items.reduce(
      (acc, item) => acc + (item.cantidad ?? 0) * (item.precio_unitario ?? 0),
      0
    );
  }

  guardarItems(): void {
    if (this.items.length === 0) {
      alert('No hay ítems para registrar.');
      return;
    }

    const gastosParaEnviar = this.items.map((item) => ({
      descripcion: item.descripcion || '',
      unidad: item.unidad || '',
      cantidad: item.cantidad || 0,
      precio_unitario: item.precio_unitario || 0,
      precio_literal: item.precio_literal || '',
    }));

    this.servicios.createGastoOperacion(gastosParaEnviar).subscribe({
      next: (res) => {
        alert(`Gastos registrados con ID: ${res.identificador_general}`);
        this.items = [];
        this.cargarGastos(); // Recargar la lista de gastos después de guardar
      },
      error: (err) => {
        console.error('Error al guardar gastos:', err);
        alert('Error al guardar los gastos.');
      },
    });
  }

  buscarPorIdentificador(): void {
    if (!this.idBuscado || this.idBuscado <= 0) {
      alert('Ingresa un ID válido.');
      return;
    }

    this.servicios.getGastoOperacionID(this.idBuscado).subscribe({
      next: (res) => {
        console.log('Respuesta de la API:', res); // Imprimir la respuesta para depuración
        if (res.length === 0) {
          alert('No se encontraron registros con ese ID.'); // Mostrar alerta si no hay datos
        }
        this.gastosFiltrados = res; // Asignar todos los gastos encontrados al arreglo
        this.verDetalles = true;
      },
      error: (err) => {
        console.error('Error al buscar:', err);
        alert('Error al buscar los registros.'); // Mensaje de error en caso de fallo
        this.gastosFiltrados = [];
        this.verDetalles = false;
      },
    });
  }

  accion(): void {
    this.router.navigate(['panel-control/ecuacion']);
  }
}
<div class="container my-4">
  <h2 class="mb-4 text-primary text-center text-uppercase">
    Gastos de Operación
  </h2>

  <p class="text-center text-muted mb-2">
    CONST. ENLOSETADO BARRIO VILLA CRUZ CALLE TARIJA (BOLIVAR (C. SENA))
  </p>
  <p class="text-center text-muted mb-4">Moneda: Bolivianos</p>

  <div class="d-flex justify-content-end mb-3">
    <button class="btn btn-success" (click)="agregarNuevoItem()">
      <i class="bi bi-plus-circle me-1"></i> Agregar nuevo ítem
    </button>
  </div>

  <div
    class="table-responsive border rounded shadow-sm"
    style="max-height: 500px; overflow-y: auto"
  >
    <table
      class="table table-bordered table-hover align-middle text-center mb-0"
    >
      <thead class="table-primary">
        <tr>
          <th>Item</th>
          <th>Descripción</th>
          <th>Unidad.</th>
          <th>Cantidad</th>
          <th>Precio Unitario</th>
          <th>Precio Unitario Literal</th>
          <th>Costo Parcial</th>
          <th>Acciones</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let item of items; let i = index">
          <td>{{ i + 1 }}</td>
          <td class="input-cell">
            <input
              [(ngModel)]="item.descripcion"
              class="full-width-input"
              placeholder="Descripción"
            />
          </td>
          <td class="input-cell">
            <input
              [(ngModel)]="item.unidad"
              class="full-width-input"
              placeholder="Und."
            />
          </td>
          <td class="input-cell">
            <input
              type="number"
              [(ngModel)]="item.cantidad"
              class="full-width-input text-end"
              placeholder="Cantidad"
              (ngModelChange)="item.cantidad = item.cantidad ?? 0"
            />
          </td>
          <td class="input-cell">
            <input
              type="number"
              step="0.01"
              [(ngModel)]="item.precio_unitario"
              class="full-width-input text-end"
              placeholder="Precio Unitario"
              (ngModelChange)="item.precio_unitario = item.precio_unitario ?? 0"
            />
          </td>
          <td class="input-cell">
            <input
              [(ngModel)]="item.precio_literal"
              class="full-width-input"
              placeholder="Literal"
            />
          </td>
          <td>
            {{
              (item.cantidad ?? 0) * (item.precio_unitario ?? 0)
                | number : "1.2-2"
            }}
          </td>
          <td>
            <div class="d-flex justify-content-center gap-2">
              <button class="btn btn-primary btn-sm" (click)="accion()">
                <i class="bi bi-eye"></i> Ver
              </button>
              <button class="btn btn-danger btn-sm" (click)="eliminarItem(i)">
                <i class="bi bi-trash"></i> Eliminar
              </button>
            </div>
          </td>
        </tr>

        <tr *ngIf="items.length === 0">
          <td colspan="8" class="text-center text-muted py-4">
            No hay ítems registrados.
          </td>
        </tr>
      </tbody>

      <tfoot class="table-light">
        <tr>
          <td colspan="6" class="text-end fw-bold">
            TOTAL GASTOS DE OPERACIÓN
          </td>
          <td class="fw-bold">{{ total | number : "1.2-2" }}</td>
          <td></td>
        </tr>
      </tfoot>
    </table>
  </div>

  <p class="text-center text-muted mt-3">
    Son: {{ total | currency : "BOB" : "symbol" : "1.2-2" }}
  </p>

  <div class="d-flex justify-content-end mt-4">
    <button class="btn btn-primary" (click)="guardarItems()">
      <i class="bi bi-save me-1"></i> Guardar todos los ítems
    </button>
  </div>
</div>

<!-- Aquí abajo es la lista de registros y el campo de búsqueda -->
<!-- Buscar por Identificador -->
<div class="mt-5">
  <label>ID de Identificador:</label>
  <input type="number" [(ngModel)]="idBuscado" placeholder="Ej. 1" />
  <button class="btn btn-info ms-2" (click)="buscarPorIdentificador()">
    Ver Detalles
  </button>
</div>

<!-- Tabla de resultados -->
<div *ngIf="verDetalles && gastosFiltrados.length > 0" class="mt-3">
  <h3>Detalles del Identificador #{{ idBuscado }}</h3>
  <table class="table table-bordered">
    <thead>
      <tr>
        <th>Identificador</th>
        <th>Descripción</th>
        <th>Unidad</th>
        <th>Cantidad</th>
        <th>Precio Unitario</th>
        <th>Precio Literal</th>
        <th>Costo Parcial</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let gasto of gastosFiltrados">
        <td>{{ gasto.identificador.id_general }}</td>
        <td>{{ gasto.descripcion }}</td>
        <td>{{ gasto.unidad }}</td>
        <td>{{ gasto.cantidad }}</td>
        <td>{{ gasto.precio_unitario | number : "1.2-2" }}</td>
        <td>{{ gasto.precio_literal }}</td>
        <td>{{ gasto.costo_parcial | number : "1.2-2" }}</td>
      </tr>
    </tbody>
  </table>
</div>

<!-- Mensaje si no hay resultados -->
<div *ngIf="verDetalles && gastosFiltrados.length === 0" class="mt-3">
  <p class="text-center text-muted">No se encontraron registros con ese ID.</p>
</div>


    def get_queryset(self):
        queryset = super().get_queryset()
        identificador_id = self.request.query_params.get('identificador', None)
        if identificador_id is not None:
            queryset = queryset.filter(identificador__id_general=identificador_id)  # Filtrar por el ID del identificador
        return queryset


